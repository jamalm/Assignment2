Player p;
Maze maze;

boolean devMode = true;
boolean sketchFullScreen() {
  return ! devMode;
}
;
void setup()
{
  if (devMode)
  {
    size(650, 650);
  }
  else
  {
    size(displayWidth, displayHeight);
  }
  
  
  objects.add(new AI(200,0,0));
  objects.add(new AI(0,200,0));
  objects.add(new AI(0,0,200));
  
  maze = new Maze(width/2-300, height/2-300, 600, mazeSize[0]);
  
  XML xml = loadXML("arcade.xml");
  XML[] children = xml.getChildren("player");
  XML playerXML = children[0];
  p = new Player(playerXML,maze.x + maze.move/2, maze.y + maze.move/2);
  
  end = false;
  clock = millis();
}

ArrayList<GameObject> objects = new ArrayList<GameObject>();
boolean[] keys = new boolean[526];

int[] mazeSize = {4,8,12,16,20};
int i = 0;
boolean end;  
float clock;  
    
int difficulty;  

void draw()
{ 
  GameObject temp;
  for(int i=0;i<objects.size();i++)
  {
    temp = objects.get(i);
    temp.display();
    temp.move();
    temp.update();
  }
  
      p.update();
  if(!maze.finished)
  {
    maze.routeStep();
  }
  
  else
  {
    if(!end)
    {
      background(255);
      maze.display();
      
      fill(200,255,200);
      stroke(0,255,0);
      strokeWeight(3);
      rect(maze.destX + maze.move/2, maze.destY + maze.move/2, 30,70);
      
      p.display();
      
      if(p.pos.x > maze.destX && p.pos.y > maze.destY)
      {
        end = true;
      }
    }
    else
    {
      noStroke();
      fill(127,255,127,10);
      rect(0,0,width,height);
      fill(255);
      rect(width/6, height/2-125, 4* width / 6 , 250);
      fill(0);
      text("Game Over!\nPress Start to Play again!",width/2, height/2);
    }
  }
}

void keyPressed()
{
  //set keys to true 
  keys[keyCode] = true;
}

void keyReleased()
{
  //set keys to false
  keys[keyCode] = false;
}


boolean checkKey(char theKey)
{
  return keys[Character.toUpperCase(theKey)];
}

char buttonNameToKey(XML xml, String buttonName)
{
  String value =  xml.getChild(buttonName).getContent();
  if ("LEFT".equalsIgnoreCase(value))
  {
    return LEFT;
  }
  if ("RIGHT".equalsIgnoreCase(value))
  {
    return RIGHT;
  }
  if ("UP".equalsIgnoreCase(value))
  {
    return UP;
  }
  if ("DOWN".equalsIgnoreCase(value))
  {
    return DOWN;
  }
  return value.charAt(0);  
}
